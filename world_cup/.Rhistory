# guides(fill = guide_legend(override.aes = list(values = c(Republican = "firebrick", Democratic = "royalblue")))) +
theme(legend.position = "bottom") +
labs(
title = 'Presidency Periods',
subtitle = 'Only available from Eisenhower (33th)',
caption = 'from www.us.gov'
)
library(maps)
install.packages('maps')
library(maps)
library(ggplot2)
thismap = map_data("world")
thismap
ggplot(thismap, aes(long, lat, group=group)) +
geom_polygon(fill="white", colour="gray") +
ggtitle("Map of World")
ggplot() +
geom_polygon(thismap, aes(long, lat, group=group), fill="white", colour="gray") +
ggtitle("Map of World")
ggplot() +
geom_polygon(data = thismap, aes(long, lat, group=group), fill="white", colour="gray") +
ggtitle("Map of World")
thismap
head(thismap)
table(thismap$group)
sort(data.frame(table(thismap$region))
## easy EDA univariate -----
a = sort(table(match$`Home Team Name`, useNA = 'ifany'), decreasing = T)
a = data.frame(a)
a %>% ggplot() +
geom_col(aes(Var1, Freq, group = 1)) +
coord_flip()
sort(table(thismap$region))
sort(table(thismap$region), decreasing = T)
head(sort(table(thismap$region), decreasing = T))
country_participate
country_participate = union_all(match %>% group_by(Year, `Home Team Name`, `Home Team Initials`) %>% summarise() %>%
rename(team_name = `Home Team Name`, team_initial = `Home Team Initials`),
match %>% group_by(Year, `Away Team Name`, `Away Team Initials`) %>% summarise() %>%
rename(team_name = `Away Team Name`, team_initial = `Away Team Initials`)) %>%
group_by(Year, team_name, team_initial) %>%
summarise() %>%
group_by(team_name, team_initial) %>%
summarise(count = n()) %>%
arrange(desc(count))
setwd("~/git/datatalk/world_cup")
require(tidyverse)
wc = read_csv('C:/Users/Nasdap/Documents/git/datatalk/world_cup/WorldCups.csv')
match = read_csv('C:/Users/Nasdap/Documents/git/datatalk/world_cup/WorldCupMatches.csv')
player = read_csv('C:/Users/Nasdap/Documents/git/datatalk/world_cup/WorldCupPlayers.csv')
# how many times each countries get into a depth level of world cup -----
table(match$Stage)
match_depth = match %>%
mutate('depth' =
case_when(
grepl('Group', Stage) ~ 1,
Stage %in% c('Round of 16', 'Preliminary round', 'First round') ~ 2,
Stage == 'Quarter-finals' ~ 3,
Stage == 'Semi-finals' ~ 4,
Stage == 'Final' ~ 5,
T ~ NA_real_
)
) %>%
filter(!is.na(depth))
# mapping with density of how many time each country get in world cup -----
country_participate = union_all(match %>% group_by(Year, `Home Team Name`, `Home Team Initials`) %>% summarise() %>%
rename(team_name = `Home Team Name`, team_initial = `Home Team Initials`),
match %>% group_by(Year, `Away Team Name`, `Away Team Initials`) %>% summarise() %>%
rename(team_name = `Away Team Name`, team_initial = `Away Team Initials`)) %>%
group_by(Year, team_name, team_initial) %>%
summarise() %>%
group_by(team_name, team_initial) %>%
summarise(count = n()) %>%
arrange(desc(count))
install.packages('rworldmap')
country_participate
library(rworldmap)
library(ggplot2)
map.world <- map_data(map="world")
map.world$name_len <- nchar(map.world$region) + sample(nrow(map.world))
map.world <- map_data(map="world")
library(rworldmap)
library(ggplot2)
map.world <- map_data(map="world")
library(rworldmap)
library(ggplot2)
map.world <- map_data(map="world")
#Add the data you want to map countries by to map.world
#In this example, I add lengths of country names plus some offset
map.world$name_len <- nchar(map.world$region) + sample(nrow(map.world))
gg <- ggplot()
gg <- gg + theme(legend.position="none")
gg <- gg + geom_map(data=map.world, map=map.world, aes(map_id=region, x=long, y=lat, fill=name_len))
gg <- gg + scale_fill_gradient(low = "green", high = "brown3", guide = "colourbar")
gg <- gg + coord_equal()
gg
library(maps)
library(ggplot2)
thismap = map_data("world")
ggplot() +
geom_polygon(data = thismap, aes(long, lat, group=group), fill="white", colour="gray") +
ggtitle("Map of World")
thismap = map_data("world")
ggplot() +
geom_polygon(data = thismap, aes(long, lat, group=group), fill="white", colour="gray") +
ggtitle("Map of World")
thismap
map_data
country_participate
thismap
country_participate
thismap_update = left_join(thismap, country_participate, by = c('region' = 'team_name'))
thismap_update
head(thismap_update)
ggplot(thismap, aes(long, lat, group=group, fill=count)) +
geom_polygon(show.legend = F) +
ggtitle("Colorful World")
ggplot(thismap_update, aes(long, lat, group=group, fill=count)) +
geom_polygon(show.legend = F) +
ggtitle("Colorful World")
ggplot(thismap_update, aes(long, lat, group=group, fill=count)) +
geom_polygon() +
ggtitle("Colorful World")
ggplot(thismap_update, aes(long, lat, group=group, fill=count)) +
geom_polygon() +
scale_fill_continuous(low = 'royalblue', high = 'firebrick')
ggplot(thismap_update, aes(long, lat, group=group, fill=count)) +
geom_polygon() +
scale_fill_continuous(low = 'blue', high = 'red')
ggplot(thismap_update, aes(long, lat, group=group, fill=count)) +
geom_polygon() +
scale_fill_continuous(low = 'white', high = 'orange')
thismap_update = left_join(thismap, country_participate, by = c('region' = 'team_name')) %>%
mutate(count = ifelse(is.na(count), 0, count))
ggplot(thismap_update, aes(long, lat, group=group, fill=count)) +
geom_polygon() +
scale_fill_continuous(low = 'white', high = 'orange')
ggplot(thismap_update, aes(long, lat, group=group, fill=count)) +
geom_polygon() +
scale_fill_continuous(low = 'white', high = 'firebrick')
ggplot(thismap_update, aes(long, lat, group=group, fill=count)) +
geom_polygon() +
geom_label(data = thismap_update %>% filter(count > 10))
ggplot(thismap_update, aes(long, lat, group=group, fill=count)) +
geom_polygon() +
geom_label(data = thismap_update %>% filter(count > 10)) +
scale_fill_continuous(low = 'white', high = 'firebrick')
ggplot(thismap_update, aes(long, lat, group=group, fill=count)) +
geom_polygon() +
geom_label(data = thismap_update %>% filter(count > 10), aes(long, lat, group = 1, label = region)) +
scale_fill_continuous(low = 'white', high = 'firebrick')
ggplot(thismap_update, aes(long, lat, group=group, fill=count)) +
geom_polygon() +
geom_label(data = thismap_update %>% filter(count > 10), aes(long, lat, label = region)) +
scale_fill_continuous(low = 'white', high = 'firebrick')
thismap_update %>% filter(count > 10)
ggplot(thismap_update, aes(long, lat, group=group, fill=count)) +
geom_polygon() +
geom_label_repel(data = thismap_update %>% filter(count > 10), aes(long, lat, label = region)) +
scale_fill_continuous(low = 'white', high = 'firebrick')
install.packages('ggrepel')
ggplot(thismap_update, aes(long, lat, group=group, fill=count)) +
geom_polygon() +
geom_label_repel(data = thismap_update %>% filter(count > 10), aes(long, lat, label = region)) +
scale_fill_continuous(low = 'white', high = 'firebrick')
require(ggrepel)
ggplot(thismap_update, aes(long, lat, group=group, fill=count)) +
geom_polygon() +
ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 10), aes(long, lat, label = region)) +
scale_fill_continuous(low = 'white', high = 'firebrick')
ggplot(thismap_update, aes(long, lat, group=group, fill=count)) +
geom_polygon() +
ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 10) %>%
group_by(region) %>%
filter(row_number() == 1), aes(long, lat, label = region)) +
scale_fill_continuous(low = 'white', high = 'firebrick')
ggplot(thismap_update, aes(long, lat, group=group, fill=count)) +
geom_polygon() +
ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 10) %>%
group_by(region) %>%
filter(row_number() == 1), aes(long, lat, label = region), fill = white) +
scale_fill_continuous(low = 'white', high = 'firebrick')
ggplot(thismap_update, aes(long, lat, group=group, fill=count)) +
geom_polygon() +
ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 10) %>%
group_by(region) %>%
filter(row_number() == 1), aes(long, lat, label = region), fill = 'white') +
scale_fill_continuous(low = 'white', high = 'firebrick')
ggplot(thismap_update, aes(long, lat, group=group, fill=count)) +
geom_polygon() +
ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 5) %>%
group_by(region) %>%
filter(row_number() == 1), aes(long, lat, label = region), fill = 'white') +
scale_fill_continuous(low = 'white', high = 'firebrick')
ggplot(thismap_update, aes(long, lat, group=group, fill=count)) +
geom_polygon() +
ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 5) %>%
group_by(region) %>%
filter(row_number() == 1), aes(long, lat, label = paste0(region, ' :', count), fill = 'white') +
scale_fill_continuous(low = 'white', high = 'firebrick')
head(thismap_update)
## easy EDA univariate -----
a = sort(table(match$`Home Team Name`, useNA = 'ifany'), decreasing = T)
a = data.frame(a)
a %>% ggplot() +
geom_col(aes(Var1, Freq, group = 1)) +
coord_flip()
ggplot(thismap_update, aes(long, lat, group=group, fill=count)) +
geom_polygon() +
ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 5) %>%
group_by(region) %>%
filter(row_number() == 1), aes(long, lat, label = paste0(region, ' :', count), fill = 'white')) +
scale_fill_continuous(low = 'white', high = 'firebrick')
library(maps)
library(ggplot2)
thismap = map_data("world")
ggplot() +
geom_polygon(data = thismap, aes(long, lat, group=group), fill="white", colour="gray") +
# geom_polygon(data = )
ggtitle("Map of World")
ggplot(thismap, aes(long, lat, group=group, fill=region)) +
geom_polygon(show.legend = F) +
ggtitle("Colorful World")
head(thismap)
head(sort(table(thismap$region), decreasing = T))
country_participate
thismap_update = left_join(thismap, country_participate, by = c('region' = 'team_name')) %>%
mutate(count = ifelse(is.na(count), 0, count))
# install.packages('ggrepel')
require(ggrepel)
ggplot(thismap_update, aes(long, lat, group=group, fill=count)) +
geom_polygon() +
ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 5) %>%
group_by(region) %>%
filter(row_number() == 1),
aes(long, lat, label = paste0(region, ' :', count), fill = 'white')) +
scale_fill_continuous(low = 'white', high = 'firebrick')
thismap_update %>% filter(count > 5) %>%
group_by(region) %>%
filter(row_number() == 1)
ggplot(thismap_update, aes(long, lat, group=group, fill=count)) +
geom_polygon() +
ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 5) %>%
group_by(region) %>%
filter(row_number() == 1),
aes(long, lat, label = paste0(region, ' :', count), fill = 'white')) +
scale_fill_continuous(low = 'white', high = 'firebrick')
ggplot(thismap_update, aes(long, lat, group=group, fill=count)) +
geom_polygon() +
ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 5) %>%
group_by(region) %>%
filter(row_number() == 1),
aes(long, lat, label = paste0(region), fill = 'white')) +
scale_fill_continuous(low = 'white', high = 'firebrick')
thismap_update
ggplot(thismap_update, aes(long, lat, group=group, fill = count)) +
geom_polygon() +
ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 5) %>%
group_by(region) %>%
filter(row_number() == 1),
aes(long, lat, label = paste0(region, ' :', count), fill = 'white')) +
scale_fill_continuous(low = 'white', high = 'firebrick')
ggplot(thismap_update, aes(long, lat, group=group, fill = count)) +
geom_polygon() +
# ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 5) %>%
#                             group_by(region) %>%
#                             filter(row_number() == 1),
#                           aes(long, lat, label = paste0(region, ' :', count), fill = 'white')) +
scale_fill_continuous(low = 'white', high = 'firebrick')
thismap_update %>% filter(count > 5) %>%
group_by(region) %>%
filter(row_number() == 1)
ggplot(thismap_update, aes(long, lat, group=group, fill = count)) +
geom_polygon() +
ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 5) %>%
group_by(region) %>%
filter(row_number() == 1),
aes(long, lat, label = paste0(region, ' :', count))) +
scale_fill_continuous(low = 'white', high = 'firebrick')
ggplot(thismap_update, aes(long, lat, group=group, fill = count)) +
geom_polygon() +
ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 5) %>%
group_by(region) %>%
filter(row_number() == 1),
aes(long, lat, label = paste0(region, ' :', count), color = white)) +
scale_fill_continuous(low = 'white', high = 'firebrick')
ggplot(thismap_update, aes(long, lat, group=group, fill = count)) +
geom_polygon() +
ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 5) %>%
group_by(region) %>%
filter(row_number() == 1),
aes(long, lat, label = paste0(region, ' :', count), color = 'white')) +
scale_fill_continuous(low = 'white', high = 'firebrick')
ggplot(thismap_update, aes(long, lat, group=group, fill = count)) +
geom_polygon() +
ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 5) %>%
group_by(region) %>%
filter(row_number() == 1),
aes(long, lat, label = paste0(region, ' :', count), fill = 'white' )) +
scale_fill_continuous(low = 'white', high = 'firebrick')
ggplot(thismap_update, aes(long, lat, group=group, fill = count)) +
geom_polygon() +
ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 5) %>%
group_by(region) %>%
filter(row_number() == 1),
aes(long, lat, label = paste0(region, ' :', count, fill = 'white') )) +
scale_fill_continuous(low = 'white', high = 'firebrick')
ggplot(thismap_update, aes(long, lat, group=group, fill = count)) +
geom_polygon() +
ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 5) %>%
group_by(region) %>%
filter(row_number() == 1),
aes(long, lat, label = paste0(region, ' :', count), fill = 'white')) +
scale_fill_continuous(low = 'white', high = 'firebrick')
ggplot(thismap_update, aes(long, lat, group=group, fill = count)) +
geom_polygon() +
ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 5) %>%
group_by(region) %>%
filter(row_number() == 1),
aes(long, lat, label = paste0(region, ' :', count)), fill = 'white') +
scale_fill_continuous(low = 'white', high = 'firebrick')
ggplot(thismap_update, aes(long, lat, group=group, fill = count)) +
geom_polygon() +
ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 10) %>%
group_by(region) %>%
filter(row_number() == 1),
aes(long, lat, label = paste0(region, ' :', count)), fill = 'white') +
scale_fill_continuous(low = 'white', high = 'firebrick') +
labs(x = NULL, y = NULL,
title = 'Sound American and Europe are hottest continent for ')
ggplot(thismap_update, aes(long, lat, group=group, fill = count)) +
geom_polygon() +
ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 10) %>%
group_by(region) %>%
filter(row_number() == 1),
aes(long, lat, label = paste0(region, ' :', count)), fill = 'white') +
scale_fill_continuous(low = 'white', high = 'firebrick') +
labs(x = NULL, y = NULL,
title = 'Sound American hottest continent for World Cup',
caption = 'source: Kaggle.com')
ggplot(thismap_update, aes(long, lat, group=group, fill = count)) +
geom_polygon() +
ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 10) %>%
group_by(region) %>%
filter(row_number() == 1),
aes(long, lat, label = paste0(region, ' :', count)), fill = 'white') +
scale_fill_continuous(low = 'white', high = 'firebrick') +
labs(x = NULL, y = NULL,
title = 'Sound American hottest continent for World Cup',
caption = element_text('source: Kaggle.com', face = 'italic'))
ggplot(thismap_update, aes(long, lat, group=group, fill = count)) +
geom_polygon() +
ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 10) %>%
group_by(region) %>%
filter(row_number() == 1),
aes(long, lat, label = paste0(region, ' :', count)), fill = 'white') +
scale_fill_continuous(low = 'white', high = 'firebrick') +
labs(x = NULL, y = NULL,
title = 'Sound American hottest continent for World Cup',
subtitle = 'Most of South American and European countries has appeared in World Cup',
caption = 'source: Kaggle.com')
ggplot(thismap_update, aes(long, lat, group=group, fill = count)) +
geom_polygon() +
ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 10) %>%
group_by(region) %>%
filter(row_number() == 1),
aes(long, lat, label = paste0(region, ' :', count)), fill = 'white') +
scale_fill_continuous(low = 'white', high = 'firebrick') +
labs(x = NULL, y = NULL,
title = 'Sound American is the hottest continent for World Cup',
subtitle = 'Most of South American and European countries have appeared in World Cup',
caption = 'source: Kaggle.com')
ggplot(thismap_update, aes(long, lat, group=group, fill = count)) +
geom_polygon() +
ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 10) %>%
group_by(region) %>%
filter(row_number() == 1),
aes(long, lat, label = paste0(region, ' :', count)), fill = 'white') +
scale_fill_continuous(low = 'white', high = 'firebrick') +
labs(x = NULL, y = NULL,
title = 'Sound American is the hottest continent for World Cup',
subtitle = 'Most of South American and European countries have appeared in World Cup',
caption = 'source: Kaggle.com') +
theme(axis.title.x = element_blank())
ggplot(thismap_update, aes(long, lat, group=group, fill = count)) +
geom_polygon() +
ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 10) %>%
group_by(region) %>%
filter(row_number() == 1),
aes(long, lat, label = paste0(region, ' :', count)), fill = 'white') +
scale_fill_continuous(low = 'white', high = 'firebrick') +
labs(x = NULL, y = NULL,
title = 'Sound American is the hottest continent for World Cup',
subtitle = 'Most of South American and European countries have appeared in World Cup',
caption = 'source: Kaggle.com') +
theme(axis.ticks.x=element_blank(),
axis.ticks.y=element_blank())
ggplot(thismap_update, aes(long, lat, group=group, fill = count)) +
geom_polygon() +
ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 10) %>%
group_by(region) %>%
filter(row_number() == 1),
aes(long, lat, label = paste0(region, ' :', count)), fill = 'white') +
scale_fill_continuous(low = 'white', high = 'firebrick') +
labs(x = NULL, y = NULL,
title = 'Sound American is the hottest continent for World Cup',
subtitle = 'Most of South American and European countries have appeared in World Cup',
caption = 'source: Kaggle.com') +
theme(axis.ticks.x = element_blank(), axis.text.x=element_blank()
axis.ticks.y = element_blank())
ggplot(thismap_update, aes(long, lat, group=group, fill = count)) +
geom_polygon() +
ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 10) %>%
group_by(region) %>%
filter(row_number() == 1),
aes(long, lat, label = paste0(region, ' :', count)), fill = 'white') +
scale_fill_continuous(low = 'white', high = 'firebrick') +
labs(x = NULL, y = NULL,
title = 'Sound American is the hottest continent for World Cup',
subtitle = 'Most of South American and European countries have appeared in World Cup',
caption = 'source: Kaggle.com') +
theme(axis.ticks.x = element_blank(), axis.text.x=element_blank(),
axis.ticks.y = element_blank())
ggplot(thismap_update, aes(long, lat, group=group, fill = count)) +
geom_polygon() +
ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 10) %>%
group_by(region) %>%
filter(row_number() == 1),
aes(long, lat, label = paste0(region, ' :', count)), fill = 'white') +
scale_fill_continuous(low = 'white', high = 'firebrick') +
labs(x = NULL, y = NULL,
title = 'Sound American is the hottest continent for World Cup',
subtitle = 'Most of South American and European countries have appeared in World Cup',
caption = 'source: Kaggle.com') +
theme(axis.ticks.x = element_blank(), axis.text.x=element_blank(),
axis.ticks.y = element_blank(), axis.text.y=element_blank())
which(grepl('Arta', thismap_update$region))
which(grepl('tatic', thismap_update$region))
which(grepl('Ar', thismap_update$region))
which(grepl('Art', thismap_update$region))
View(thismap)
a = unique(thismap_update$region)
a = data.frame(unique(thismap_update$region))
View(a)
ggplot(thismap_update %>% filter(region != 'Antarctica'), aes(long, lat, group=group, fill = count)) +
geom_polygon() +
ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 10) %>%
group_by(region) %>%
filter(row_number() == 1),
aes(long, lat, label = paste0(region, ' :', count)), fill = 'white') +
scale_fill_continuous(low = 'white', high = 'firebrick') +
labs(x = NULL, y = NULL,
title = 'Sound American is the hottest continent for World Cup',
subtitle = 'Most of South American and European countries have appeared in World Cup',
caption = 'source: Kaggle.com') +
theme(axis.ticks.x = element_blank(), axis.text.x=element_blank(),
axis.ticks.y = element_blank(), axis.text.y=element_blank())
thismap_update
country_participate
map_data
thismap
str(thismap)
thismap = as.tibble(map_data("world"))
thismap
str(thismap)
country_participate
source('~/git/datatalk/world_cup/wc.R', echo=TRUE)
map_data("world")
library(maps)
library(ggplot2)
thismap = as.tibble(map_data("world"))
library(maps)
library(ggplot2)
thismap = as.tibble(map_data("world"))
library(maps)
library(ggplot2)
thismap = as.tibble(map_data("world"))
thismap
thismap = as.tibble(map_data("world"))
map_data
thismap = as.tibble(maps::map_data("world"))
thismap = as.tibble(map_data("world"))
map_data
library(maps)
maps::world2MapEnv
maps::worldMapEnv
a = maps::worldMapEnv
a = maps::unemp
View(a)
thismap = as.tibble(map_data(map = "world"))
library(maps)
a = maps::unemp
library(ggplot2)
thismap = as.tibble(map_data(map = "world"))
library(maps)
a = maps::unemp
library(ggplot2)
thismap = as.tibble(map_data(map = "world"))
thismap = map_data(map = "world")
ggplot(thismap_update %>% filter(region != 'Antarctica'), aes(long, lat, group=group, fill = count)) +
geom_polygon() +
ggrepel::geom_label_repel(data = thismap_update %>% filter(count > 10) %>%
group_by(region) %>%
filter(row_number() == 1),
aes(long, lat, label = paste0(region, ' :', count)), fill = 'white') +
scale_fill_continuous(low = 'white', high = 'firebrick') +
labs(x = NULL, y = NULL,
title = 'Sound American is the hottest continent for World Cup',
subtitle = 'Most of South American and European countries have appeared in World Cup',
caption = 'source: Kaggle.com') +
theme(axis.ticks.x = element_blank(), axis.text.x=element_blank(),
axis.ticks.y = element_blank(), axis.text.y=element_blank())
